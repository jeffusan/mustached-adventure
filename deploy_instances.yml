---
# ansible-playbook to deploy multiple instances
# ansible-playbook deploy_instances.yml -vv --private-key=/path/to/key
# ansible-playbook deploy_instances.yml -vv --private-key=/home/jeff/vm_share/bashy_dot_files/els-demo.key
# WORKING EXAMPLE ansible localhost -m ec2 -a "image=ami-bddaa2bc instance_type=t1.micro keypair=els-demo group=elasticsearch-demo-security-group wait=yes region=ap-northeast-1" -c local --private-key=/home/jeff/.ssh/els-demo.key

- name: Create Instances
  hosts: localhost
  gather_facts: False
  connection: local
  user: root
  remote_user: ubuntu
  
  vars:
    keypair: els-demo
    instance_type: t1.micro
    security_group: elasticsearch-demo-security-group
    image: ami-bddaa2bc
    instance_count: 3
    region: ap-northeast-1
    timezone: "Asia/Tokyo"
      
  tasks:
    - name: provision instance
      local_action: ec2 keypair={{keypair}} group={{security_group}} instance_type={{instance_type}} image={{image}} wait=yes count={{instance_count}} region={{region}}
      register: ec2
          
      # Use with_items to add each instance's public IP to a new hostgroup for use in the next play.
      # TODO: I'm not sure what the function of groups is here and I don't see how this impacts the provisioning.
    - name: Add new instances to host group
      local_action: add_host name={{item.public_dns_name}} groups=deploy
      with_items: ec2.instances
      
      # Configure timezone
    - name: Configuring timezone
      shell: echo {{ timezone }} > /etc/timezone; dpkg-reconfigure --frontend noninteractive tzdata
      sudo: yes

      # Use the ec2_vol module to create volumes for attachment to each instance.
    - name: Create a volume and attach
      local_action: ec2_vol volume_size=20 instance=${item.id}
      with_items: ec2.instances

    - name: Wait for SSH to be available 
      local_action: wait_for host=${item.public_dns_name} port=22 delay=60 timeout=320 state=started
      with_items: ${ec2.instances}
